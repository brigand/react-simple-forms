/*
import 'core-js';

jest.dontMock('..');

import {status} from '..';

describe('Form', () => {

  it('should work', () => {




    console.log(status.valid === status.invalid);
  });
});

jest.dontMock('../elements/Message');
jest.dontMock('../elements/Submit');
jest.dontMock('../Form');

import React from 'react/addons';
import {Promise} from 'es6-promise';

import Form from '../Form';
import Submit from '../elements/Submit';

const {TestUtils} = React.addons;

describe('Form', () => {

  // should call onError when validation fails
  //
  // should call onSuccess when validation succeeds
  //  - assert correct data recieved
  //
  // should x 2 enter key triggers

  pit('should interact with form elements', () => {
    return new Promise((resolve) => {
      const instance = TestUtils.renderIntoDocument(
        <Form validate={resolve}>
          <Submit>
            <button onClick={() => {console.log("HEELELE");}}>Testing</button>
            <Submit>
              <button onClick={() => {console.log("HEELELE");}}>Testing</button>
            </Submit>
          </Submit>
        </Form>
      );
      let b = TestUtils.findRenderedDOMComponentWithTag(instance, 'button');
      TestUtils.Simulate.click(b.getDOMNode())
    });
    // check message and submit
  });
});
*/

/*
Form
  * use createValidator and Field for all of these
  should call onSuccess with transformed data on success
  should call onError when validation fails
    - Field should have errorClass
  should have enter key tab through fields by default (test submit at the end)
  should have enter key immediately submit if requested

Message
  should show first message (check classNamem matches errorClass)

FormMixin
  test getFieldData permutations
    - message
    - status
    - lastTrigger

## Field validation strategies

- field must have a validation trigger:
  - submit, blur, input (default is blur)
- fields have four states idle, pending, invalid, valid
  - special fields can respond
- each field also hash a lastValidationTrigger
  - submit, blur, input
  - useful by the field to draw different levels of indicators.
Fields are state machines

 */
